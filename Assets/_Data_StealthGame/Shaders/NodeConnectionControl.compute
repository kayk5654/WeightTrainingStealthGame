// Control connection and movement of nodes
#pragma kernel UpdateNodePosition

// structure of node
struct Node
{
    int _id; // identify each nodes
    float3 _position; // position of a node
    float4 _rotation; // rotation of a node

};

// structure of connection between nodes
struct Connection
{
    int _id; // identify each connections
    int _connectNode1; // node to connect
    int _connectNode2; // node to connect
};

// buffer for nodes (for reading)
StructuredBuffer<Node> _nodesBufferRead;

// buffer for nodes (for writing)
RWStructuredBuffer<Node> _nodesBufferWrite;

// buffer for connections (for reading)
StructuredBuffer <Connection> _connectionBufferRead;

// buffer for connections (for writing)
RWStructuredBuffer<Connection> _connectionBufferWrite;

// max number of nodes
uint _nodeCount;

// range of neighbour nodes which affects single node's behaviour
float _neighbourRadious;

// delta time
float _deltaTime;



// size of thread group
#define SIMULATION_BLOCK_SIZE 256

// shared memory to contain node data
groupshared Node _nodeData[SIMULATION_BLOCK_SIZE];

// calculate new node position
[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void UpdateNodePosition
(
    uint3 DTid : SV_DispatchThreadID, // global thread index (= Gid.x * SIMULATION_BLOCK_SIZE + GTid.x)
    uint3 Gid : SV_GroupID, // identifier of a group
    uint3 GTid : SV_GroupThreadID, // thread id in a group
    uint GI : SV_GroupIndex // one-dimensional group thread id (0-255)
)
{
    // get position of this node
    float3 thisNodePos = _nodesBufferRead[DTid.x]._position;

    // sum of velocity to separate nodes
    float3 separateVelSum = float3(0, 0, 0);

    // number of neighbour nodes for calculation of saparation velocity
    int separateNodeCount = 0;


    // calculate by each thread groups
    for (uint blockId = 0; blockId < _nodeCount; blockId += SIMULATION_BLOCK_SIZE)
    {
        // contain data of nodes in the shared memory
        _nodeData[GI] = _nodesBufferRead[blockId + GI];

        // wait for group syncing
        GroupMemoryBarrierWithGroupSync();

        // calculate influence of other nodes
        for (uint i = 0; i < SIMULATION_BLOCK_SIZE; i++)
        {
            // another node's position
            float3 otherNodePos = _nodesBufferRead[i]._position;

            // distance between this node and another node
            float dist = distance(thisNodePos, otherNodePos);

            if (dist > 0.0 && dist <= _neighbourRadious)
            {
                // if another node is close, apply force to take distance from another node

                // direction from another node to this node
                float3 otherToThisNodeVector = normalize(thisNodePos - otherNodePos);

                // apply level of influence depending on the distance
                otherToThisNodeVector /= dist;

                // add velocity to separate from another node
                separateVelSum += otherToThisNodeVector;

                // increment neighbour nodes number
                separateNodeCount++;
            }
        }

        // wait for group syncing
        GroupMemoryBarrierWithGroupSync();
    }
    
    // calculate separation velocity
    float3 separateVel = float3(0, 0, 0);

    separateVel = separateNodeCount > 0 ? separateVelSum / (float)separateNodeCount : separateVelSum;

    // write updated position
    _nodesBufferWrite[DTid.x]._position = thisNodePos + separateVel * _deltaTime;
}
