// Control connection and movement of nodes
#pragma kernel UpdateNode

#pragma kernel InitializeConnection

#pragma kernel FindNearestNode

// structure of node
struct Node
{
    int _id; // identify each nodes
    float3 _position; // position of a node
    float3 _velocity;
};

// structure of connection between nodes
struct Connection
{
    int _id; // identify each connections
    int _connectNode1; // node to connect
    int _connectNode2; // node to connect
};

// buffer for nodes (for reading)
StructuredBuffer<Node> _nodesBufferRead;

// buffer for nodes (for writing)
RWStructuredBuffer<Node> _nodesBufferWrite;

// buffer for connections (for reading)
StructuredBuffer <Connection> _connectionBufferRead;

// buffer for connections (for writing)
RWStructuredBuffer<Connection> _connectionBufferWrite;

// buffer for nearest node searching result
RWStructuredBuffer<int> _nearestNodeBuffer;

// buffer for nearest node searching origins
StructuredBuffer<float3> _nearestNodeOriginBuffer;

// max number of nodes
uint _nodeCount;

// range of neighbour nodes which affects single node's behaviour
float _neighbourRadious;

// delta time
float _deltaTime;

// max number of connection per one node
int _maxConnectionPerNode;

// range of searching connectable nodes fron a specific node
float _connectRadious;

// size of thread group
#define SIMULATION_BLOCK_SIZE 256

// shared memory to contain node data
groupshared Node _nodeData[SIMULATION_BLOCK_SIZE];

// weight of the velocity to avoid floor
float _avoidBoundaryVelWeight;

// center of the boundary of the node generation area
float3 _boundaryCenter;

// size of the boundary of the node generation area
float3 _boundarySize;

// rotation of the boundary of the node generation area
float4x4 _boundaryRotation;

// of a node reaches at the boundary (assuming AABB) return velocity to avoid it
float3 AvoidBoundary(float3 position, float3 center, float3 size, float4x4 rotMatrix)
{
    // apply rotation; pivot is world space origin
    float4x4 transposedRotationMatrix = transpose(rotMatrix);

    center = mul(transposedRotationMatrix, center);
    position = mul(transposedRotationMatrix, position);

    // declare variables for calculation
    float distanceFromBoundaryThreshold = 0.05;
    float3 maxPos = center + size * 0.5;
    float3 minPos = center - size * 0.5;

    // calculate velocity
    float3 avoidBoundaryVelocity = float3(0, 0, 0);
    avoidBoundaryVelocity.x -= smoothstep(maxPos.x - distanceFromBoundaryThreshold, maxPos.x, position.x);
    avoidBoundaryVelocity.x += smoothstep(minPos.x + distanceFromBoundaryThreshold, minPos.x, position.x);
    avoidBoundaryVelocity.y -= smoothstep(maxPos.y - distanceFromBoundaryThreshold, maxPos.y, position.y);
    avoidBoundaryVelocity.y += smoothstep(minPos.y + distanceFromBoundaryThreshold, minPos.y, position.y);
    avoidBoundaryVelocity.z -= smoothstep(maxPos.z - distanceFromBoundaryThreshold, maxPos.z, position.z);
    avoidBoundaryVelocity.z += smoothstep(minPos.z + distanceFromBoundaryThreshold, minPos.z, position.z);

    // revert rotation
    avoidBoundaryVelocity = mul(rotMatrix, avoidBoundaryVelocity);

    return avoidBoundaryVelocity;
}

// return random value, -1 to 1
float3 Random(float3 position)
{
    return frac(sin(cross(position, float3(12.9898, 78.233, 41.028913)))) * 2 - 1;
}

// return value noise
float3 ValueNoise(float3 position)
{
    // get int and fraction of given position
    float3 integer = floor(position);
    float3 fraction = frac(position);

    // sample 8 points
    float3 n000 = Random(integer);
    float3 n001 = Random(integer + float3(0, 0, 1));
    float3 n101 = Random(integer + float3(1, 0, 1));
    float3 n100 = Random(integer + float3(1, 0, 0));
    float3 n010 = Random(integer + float3(0, 1, 0));
    float3 n011 = Random(integer + float3(0, 1, 1));
    float3 n110 = Random(integer + float3(1, 1, 0));
    float3 n111 = Random(integer + float3(1, 1, 1));

    // smooth interpolation
    // cubic hermine curve
    float3 u = fraction * fraction * (3.0 - 2.0 * fraction);

    return lerp(lerp(lerp(n000, n100, u.x), lerp(n010, n110, u.x), u.y),lerp(lerp(n001, n101, u.x),lerp(n011, n111, u.x), u.y), u.z);
}

// return noise
float3 Noise(float3 position) 
{
    // test value noise
    return ValueNoise(position);
}

// calculate new node position
[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void UpdateNode
(
    uint3 DTid : SV_DispatchThreadID, // global thread index (= Gid.x * SIMULATION_BLOCK_SIZE + GTid.x)
    uint3 Gid : SV_GroupID, // identifier of a group
    uint3 GTid : SV_GroupThreadID, // thread id in a group
    uint GI : SV_GroupIndex // one-dimensional group thread id (0-255)
)
{
    // get position of this node
    float3 thisNodePos = _nodesBufferRead[DTid.x]._position;

    // sum of velocity to separate nodes
    float3 separateVelSum = float3(0, 0, 0);

    // number of neighbour nodes for calculation of saparation velocity
    int separateNodeCount = 0;


    // calculate by each thread groups
    for (uint blockId = 0; blockId < _nodeCount; blockId += SIMULATION_BLOCK_SIZE)
    {
        // contain data of nodes in the shared memory
        _nodeData[GI] = _nodesBufferRead[blockId + GI];

        // wait for group syncing
        GroupMemoryBarrierWithGroupSync();

        // calculate influence of other nodes
        for (uint i = 0; i < SIMULATION_BLOCK_SIZE; i++)
        {
            // another node's position
            float3 otherNodePos = _nodesBufferRead[i]._position;

            // distance between this node and another node
            float dist = distance(thisNodePos, otherNodePos);

            if (dist > 0.0 && dist <= _neighbourRadious)
            {
                // if another node is close, apply force to take distance from another node

                // direction from another node to this node
                float3 otherToThisNodeVector = normalize(thisNodePos - otherNodePos);

                // apply level of influence depending on the distance
                otherToThisNodeVector /= dist;

                // add velocity to separate from another node
                separateVelSum += otherToThisNodeVector;

                // increment neighbour nodes number
                separateNodeCount++;
            }
        }

        // wait for group syncing
        GroupMemoryBarrierWithGroupSync();
    }
    
    // calculate separation velocity
    float3 separateVel = float3(0, 0, 0);
    separateVel = separateNodeCount > 0 ? separateVelSum / (float)separateNodeCount : separateVelSum;

    // calculate avoid boundary velocity
    float3 avoidBoundary = AvoidBoundary(thisNodePos, _boundaryCenter, _boundarySize, _boundaryRotation) * _avoidBoundaryVelWeight;
    // calculate noise velocity field
    float noiseScale = 15;
    float noiseWeight = 0.5;
    float3 noiseVel = normalize(Noise(thisNodePos * noiseScale)) * noiseWeight;

    // calculate velocity
    float3 velocity = (separateVel + avoidBoundary + noiseVel) * _deltaTime;
    float velLerpFactor = 0.1;
    velocity = lerp(_nodesBufferWrite[DTid.x]._velocity, velocity, velLerpFactor);

    // write updated position
    _nodesBufferWrite[DTid.x]._position = thisNodePos + velocity;
    _nodesBufferWrite[DTid.x]._velocity = velocity;
}

// calculate initial connection between nodes
// max connectable nodes are defined by _maxConnectionPerNode,
// so the space that the single node can take in the connection buffer is also define by _maxConnectionPerNode
[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void InitializeConnection
(
    uint3 DTid : SV_DispatchThreadID // global thread index (= Gid.x * SIMULATION_BLOCK_SIZE + GTid.x)
) 
{
    // get position of this node
    float3 thisNodePos = _nodesBufferRead[DTid.x]._position;
    
    // number of connectable node found in the for loop below; max is _maxConnectionPerNode
    int connectableNodeCount = 0;

    // calculate influence of other nodes
    // max connection per node is limited
    for (uint i = 0; i < _nodeCount; i++)
    {
        // another node's position
        float3 otherNodePos = _nodesBufferRead[i]._position;

        // distance between this node and another node
        float dist = distance(thisNodePos, otherNodePos);

        if (dist > 0.0 && dist <= _connectRadious)
        {
            // if another node is closer than the threshold, connect those nodes

            // if the same combination of nodes is found,
            // this connection isn't stored in the buffer at the final implementation
            // but doubled connection is temprarily accepted while development
            int connectionId = (int)DTid.x * _maxConnectionPerNode + connectableNodeCount;
            _connectionBufferWrite[connectionId]._connectNode1 = _nodesBufferRead[DTid.x]._id;
            _connectionBufferWrite[connectionId]._connectNode2 = _nodesBufferRead[i]._id;
            _connectionBufferWrite[connectionId]._id = connectionId;

            // count connectable node
            connectableNodeCount++;

            // if connectable nodes reached at the max number, end this for loop
            if (connectableNodeCount >= _maxConnectionPerNode) { break; }
        }
    }

    // if the number of connectable nodes is less than _maxConnectionPerNode,
    // copy the data in _connectionBufferRead to _connectionBufferWrite
    // in the rest of buffer for this node
    // original stored values in _connectionBufferRead is;
    // Connection{_id = -1, _connectNode1 = -1, _connectNode2 = -1}
    for (int connectId = connectableNodeCount; connectId < _maxConnectionPerNode; connectId++)
    {
        int connectionId = DTid.x * _maxConnectionPerNode + connectId;
        _connectionBufferWrite[connectionId]._id = -1;
        _connectionBufferWrite[connectionId]._connectNode1 = _connectionBufferRead[connectionId]._connectNode1;
        _connectionBufferWrite[connectionId]._connectNode2 = _connectionBufferRead[connectionId]._connectNode2;
    }

}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void FindNearestNode
(
    uint3 DTid : SV_DispatchThreadID // global thread index (= Gid.x * SIMULATION_BLOCK_SIZE + GTid.x)
) 
{
    // the shortest distance from the search origin to the closest node
    float minDistance;
    int nearestNodeId;

    // search the nearest node from a search origin
    for (int nodeId = 0; nodeId < _nodeCount; nodeId++)
    {
        // get distance between a node and search origin
        float dist = distance(_nodesBufferRead[nodeId]._position, _nearestNodeOriginBuffer[DTid.x]);
        
        // initialize minDistance to compare distance to other nodes
        if(nodeId == 0)
        {
            minDistance = dist;
            nearestNodeId = nodeId;
            continue;
        }

        // compare distance
        if (dist < minDistance) 
        {
            // if this dist is the shortest, update minDistance and nearestNodeId 
            minDistance = dist;
            nearestNodeId = nodeId;
        }
    }

    // set calculation result
    _nearestNodeBuffer[DTid.x] = nearestNodeId;
}